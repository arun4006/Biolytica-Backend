service: fileservice
frameworkVersion: "3"

package:
  patterns:
  - 'node_modules/**'

# plugins:
#   - serverless-plugin-include-dependencies  

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:ListBucket"
            - "s3:PutBucketAcl"
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

  environment:
    bucketName: ${self:custom.bucketName}   

custom:
  bucketName: aws-demo-files

functions:
     
  getobjsignedurl:
    handler: src/api/getallFiles.handler
    events:
      - http:
          path: /getobjurl
          method: get
          cors: true  

  fileUploadService:
    handler: src/api/fileUpload.handler
    events:
      - http:
          path: /fileupload
          method: post
          cors: true

  userRegisterService:
    handler: src/api/userRegister.handler
    events:
      - http:
          path: /user/register
          method: post
          cors: true 
             

  getFilesLocationService:
    handler: src/api/getFilesByLocation.handler
    events:
      - http:
          path: /getfilesbylocation
          method: get
          cors: true 

  ListStatesService:
    handler: src/api/getAllStates.handler
    events:
      - http:
          path: /getstates
          method: get
          cors: true 

  ListCityService:
    handler: src/api/getAllCities.handler
    events:
      - http:
          path: /getcity
          method: get
          cors: true  


  ListUsersAdmin:
    handler: src/api/getAllUsers.handler
    events:
      - http:
          path: /getusers
          method: get
          cors: true 
  
  isAdminService:
    handler: src/api/isAdmin.handler
    events:
      - http:
          path: /isadmin
          method: get
          cors: true 
  
  editUserProfileService:
    handler: src/api/editUserProfile.handler
    events:
      - http:
          path: /user/edit/{id}
          method: put
          cors: true 
    
  getUserService:
    handler: src/api/getUser.handler
    events:
      - http:
          path: /user/{id}
          method: get
          cors: true 

  deleteUserService:
    handler: src/api/deleteUser.handler
    events:
      - http:
          path: /user/delete/{id}
          method: delete
          cors: true 
         
  testApiService:
    handler: src/api/testapi.handler
    events:
      - http:
          path: test
          method: get
          cors: true        

                
resources:
  Resources:
   MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:  aws-demo-files
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - ETag

#   package:
# Â   excludeDevDependencies: false

